//
//  NewsDetailViewController.swift
//  LatestNews
//
//  Created by avanees on 26/07/2020.
//  Copyright (c) 2020 ave. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import SDWebImage

final class NewsDetailViewController: UIViewController {

    // MARK: - Public properties -

    var presenter: NewsDetailPresenterInterface!
    
    // MARK: - Private properties -
    
    private let scrollView = UIScrollView()
    private let stackView = UIStackView()
    private let newsImage = UIImageView()
    private let titleLabel = UILabel()
    private let authorLabel = UILabel()
    private let publishingDateLabel = UILabel()
    private let descriptionLabel = UILabel()
    private let contentLabel = UILabel()
    private let originalArticleButton = UIButton()
    private let placeholderImage = UIImage(named: "placeholderImage")

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        
        configureView()
        presenter.viewDidLoad()
    }
    
    // MARK: - Actions -
    
    @objc func tappedOriginalArticleButton() {
        presenter.showOriginalNewsItem()
    }
}

// MARK: - Extensions -

extension NewsDetailViewController: NewsDetailViewInterface {
    func update(with viewModel: NewsDetailPresentable) {
        if let imageUrl = viewModel.imageUrl, let url = URL(string: imageUrl) {
            newsImage.sd_setImage(with: url)
        } else {
            newsImage.sd_imageIndicator = .none
            newsImage.image = placeholderImage
        }
        titleLabel.text = viewModel.title
        authorLabel.text = viewModel.author
        publishingDateLabel.text = viewModel.publishingDate
        descriptionLabel.text = viewModel.description
        contentLabel.text = viewModel.content
    }
}

// MARK: - Setup UI -

extension NewsDetailViewController: ConfigurableView {
    func configureViewProperties() {
        view.backgroundColor = Colors.backgroundCanvasColor
    }
    
    func configureSubviews() {
        view.addSubview(scrollView)
        
        stackView.axis = .vertical
        stackView.alignment = .fill
        stackView.spacing = 8
        stackView.distribution = .fill
        scrollView.addSubview(stackView)
        
        newsImage.contentMode = .scaleAspectFit
        newsImage.sd_imageIndicator = SDWebImageActivityIndicator.grayLarge
        stackView.addArrangedSubview(newsImage)
        
        titleLabel.font = TextStyles.h2
        titleLabel.textColor = TextStyles.h2Color
        titleLabel.numberOfLines = 0
        titleLabel.lineBreakMode = .byWordWrapping
        stackView.addArrangedSubview(titleLabel)
        
        authorLabel.font = TextStyles.bodyCopy
        authorLabel.textColor = TextStyles.bodyCopyColor
        authorLabel.numberOfLines = 0
        authorLabel.lineBreakMode = .byWordWrapping
        stackView.addArrangedSubview(authorLabel)

        publishingDateLabel.font = TextStyles.bodyCopy
        publishingDateLabel.textColor = TextStyles.bodyCopyColor
        publishingDateLabel.numberOfLines = 0
        publishingDateLabel.lineBreakMode = .byWordWrapping
        stackView.addArrangedSubview(publishingDateLabel)

        descriptionLabel.font = TextStyles.bodyCopy
        descriptionLabel.textColor = TextStyles.bodyCopyColor
        descriptionLabel.numberOfLines = 0
        descriptionLabel.lineBreakMode = .byWordWrapping
        stackView.addArrangedSubview(descriptionLabel)

        contentLabel.font = TextStyles.bodyCopy
        contentLabel.textColor = TextStyles.bodyCopyColor
        contentLabel.numberOfLines = 0
        contentLabel.lineBreakMode = .byWordWrapping
        stackView.addArrangedSubview(contentLabel)
        
        originalArticleButton.setTitle("newsdetail.originalstory.button".localized(), for: .normal)
        originalArticleButton.addTarget(self, action: #selector(tappedOriginalArticleButton), for: .touchUpInside)
        originalArticleButton.layer.cornerRadius = 5
        originalArticleButton.backgroundColor = Colors.buttonBackgroundColor
        originalArticleButton.tintColor = Colors.buttonBackgroundColor
        stackView.addArrangedSubview(originalArticleButton)
    }
    
    func configureLayout() {
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            scrollView.topAnchor.constraint(equalTo: view.topAnchor),
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
        
        stackView.layoutMargins = UIEdgeInsets(top: 8, left: 20, bottom: 8, right: 20)
        stackView.isLayoutMarginsRelativeArrangement = true
        stackView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
          stackView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor, constant: 0),
          stackView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor, constant: 0),
          stackView.topAnchor.constraint(equalTo: scrollView.topAnchor),
          stackView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),

          stackView.widthAnchor.constraint(lessThanOrEqualTo: scrollView.widthAnchor)
        ])
        
        newsImage.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            newsImage.heightAnchor.constraint(equalToConstant: 100)
        ])
        
        titleLabel.translatesAutoresizingMaskIntoConstraints = false

        authorLabel.translatesAutoresizingMaskIntoConstraints = false
        
        publishingDateLabel.translatesAutoresizingMaskIntoConstraints = false
        
        descriptionLabel.translatesAutoresizingMaskIntoConstraints = false

        contentLabel.translatesAutoresizingMaskIntoConstraints = false
        
        originalArticleButton.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
          originalArticleButton.heightAnchor.constraint(equalToConstant: 50)
        ])
    }
}
