//
//  NewsListPresenter.swift
//  LatestNews
//
//  Created by avanees on 23/07/2020.
//  Copyright (c) 2020 ave. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class NewsListPresenter {

    // MARK: - Private properties -

    private weak var view: NewsListViewInterface?
    private var interactor: NewsListInteractorInterface
    private let router: NewsListRouterInterface
    
    private var newsItems: [NewsItem] = []

    // MARK: - Lifecycle -

    init(view: NewsListViewInterface, interactor: NewsListInteractorInterface, router: NewsListRouterInterface) {
        self.view = view
        self.interactor = interactor
        self.router = router
        self.interactor.delegate = self
    }
}

// MARK: - Extensions -

extension NewsListPresenter: NewsListPresenterInterface {
    func viewDidLoad() {
        getNewsItems()
    }
    
    private func getNewsItems() {
        view?.startActivityIndicator()
        interactor.fetchTopHeadlines()
    }
    
    func countNewsItems() -> Int {
        return newsItems.count
    }
    
    func newsItemAtIndex(_ index: IndexPath) -> NewsListTableViewCellPresentable {
        let newsItem = newsItems[index.row]
        return NewsListTableViewCellViewModel(imageUrl: newsItem.urlToImage,
                                              title: newsItem.title)
    }

    func showDetailsForNewsItemAtIndex(_ index: IndexPath) {
        let newsItem = newsItems[index.row]
        router.navigate(to: .detail(newsItem))
    }
}

// MARK: - NewsListInteractorDelegate -

extension NewsListPresenter: NewsListInteractorDelegate {
    func interactor(_ interactor: NewsListInteractorInterface, didFetchTopHeadlines newsItems: [NewsItem]) {
        view?.stopActivityIndicator()
        self.newsItems = newsItems
        guard !newsItems.isEmpty else {
            view?.showEmptyResultsView()
            return
        }
        view?.showResults()
    }
    
    func interactor(_ interactor: NewsListInteractorInterface,
                    failedRetrievingTopHeadlines error: Error) {
        view?.stopActivityIndicator()
        router.showError(error: error)
    }
}
